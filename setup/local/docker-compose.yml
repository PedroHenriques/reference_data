services:
  dblistener:
    build:
      context: ../../
      dockerfile: ./DbListener/Dockerfile
    container_name: "dblistener"
    restart: on-failure
    networks:
      - dblistener

  dbinterface:
    image: softinstigate/restheart:8.1
    container_name: dbinterface
    restart: on-failure
    environment:
      RHO: >
          /mclient/connection-string->"mongodb://mongodb";
          /http-listener/host->"0.0.0.0";
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    ports:
      - "8080:8080"

  mongo1:
    image: mongo:8-noble
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    container_name: "mongodb1"
    restart: on-failure

  mongo2:
    image: mongo:8-noble
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - 27018:27018
    extra_hosts:
      - "host.docker.internal:host-gateway"
    container_name: "mongodb2"
    restart: on-failure

  mongo3:
    image: mongo:8-noble
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    ports:
      - 27019:27019
    extra_hosts:
      - "host.docker.internal:host-gateway"
    container_name: "mongodb3"
    restart: on-failure

networks:
  dblistener: