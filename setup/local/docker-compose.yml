services:
  notification:
    build:
      context: ../../
      dockerfile: ./src/Notification/Dockerfile
    container_name: "notification"
    restart: on-failure
    depends_on:
      notification_db:
        condition: service_healthy
      dblistener_db:
        condition: service_healthy
    environment:
      - DEPLOYMENT_ENV=dev
      - DOTNET_ENVIRONMENT=Development
      - NUM_PROCESSES=2
      - REDIS_CON_STR=notification_db:6379
      - REDIS_CON_STR_QUEUE=dblistener_db:6379
      - API_BASE_URL=http://api:10000
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - KAFKA_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - KAFKA_SCHEMA_SUBJECT=${KAFKA_SCHEMA_SUBJECT:-refdata}
      - KAFKA_SCHEMA_VERSION=${KAFKA_SCHEMA_VERSION:-1}
      - DBLISTENER_CACHE_CHANGES_QUEUE_KEY=${DBLISTENER_CACHE_CHANGES_QUEUE_KEY:-mongo_changes}
      - MONGO_COL_NAME=${MONGO_COL_NAME:-Entities}
      - LD_ENV_SDK_KEY=${LD_ENV_SDK_KEY}
      - LD_CONTEXT_API_KEY=${LD_CONTEXT_API_KEY}
      - LD_CONTEXT_NAME=${LD_CONTEXT_NAME}
      - LD_DISPATCHER_ACTIVE_KEY=ref-data-notification-send-notifications
    networks:
      - notification
      - notificationDb
      - dblistenerDb
      - api
      - kafka

  notification_db:
    image: redis:7-alpine
    container_name: "notification_db"
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    networks:
      - notificationDb

  dblistener:
    build:
      context: ../../
      dockerfile: ./src/DbListener/Dockerfile
    container_name: "dblistener"
    restart: on-failure
    depends_on:
      dblistener_db:
        condition: service_healthy
      api_db:
        condition: service_healthy
    environment:
      - DEPLOYMENT_ENV=dev
      - DOTNET_ENVIRONMENT=Development
      - MONGO_CON_STR=mongodb://${API_DB_ADMIN_USER:-admin}:${API_DB_ADMIN_PW:-pw}@api_db:27017/admin?authMechanism=SCRAM-SHA-256&replicaSet=rs0
      - REDIS_CON_STR=dblistener_db:6379
      - MONGO_DB_NAME=${MONGO_DB_NAME:-RefData}
      - DBLISTENER_CACHE_CHANGE_DATA_KEY=${DBLISTENER_CACHE_CHANGE_DATA_KEY:-change_resume_data}
      - DBLISTENER_CACHE_CHANGES_QUEUE_KEY=${DBLISTENER_CACHE_CHANGES_QUEUE_KEY:-mongo_changes}
      - LD_ENV_SDK_KEY=${LD_ENV_SDK_KEY}
      - LD_CONTEXT_API_KEY=${LD_CONTEXT_API_KEY}
      - LD_CONTEXT_NAME=${LD_CONTEXT_NAME}
      - LD_DBLISTENER_ACTIVE_KEY=ref-data-db-listener-sub-stream
    networks:
      - dblistener
      - dblistenerDb
      - apiDb

  dblistener_db:
    image: redis:7-alpine
    container_name: "dblistener_db"
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    networks:
      - dblistener
      - dblistenerDb

  redis_gui:
    image: redislabs/redisinsight:latest
    container_name: "redis_gui"
    restart: on-failure
    depends_on:
      dblistener_db:
        condition: service_healthy
    ports:
      - ${REDIS_GUI_PORT:-9001}:5540
    networks:
      - dblistenerDb
      - notificationDb

  api:
    build:
      context: ../../
      dockerfile: ./src/Api/Dockerfile
    container_name: "api"
    restart: on-failure
    depends_on:
      api_db:
        condition: service_healthy
    environment:
      - DEPLOYMENT_ENV=dev
      - DOTNET_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=10000
      - MONGO_CON_STR=mongodb://${API_DB_ADMIN_USER:-admin}:${API_DB_ADMIN_PW:-pw}@api_db:27017/admin?authMechanism=SCRAM-SHA-256&replicaSet=rs0
      - MONGO_DB_NAME=${MONGO_DB_NAME:-RefData}
      - MONGO_COL_NAME=${MONGO_COL_NAME:-Entities}
      - LD_ENV_SDK_KEY=${LD_ENV_SDK_KEY}
      - LD_CONTEXT_API_KEY=${LD_CONTEXT_API_KEY}
      - LD_CONTEXT_NAME=${LD_CONTEXT_NAME}
      - LD_API_ACTIVE_KEY=ref-data-api-serve-requests
    ports:
      - ${API_PORT:-10000}:10000
    networks:
      - api

  api_db:
    image: mongo:8-noble
    entrypoint:
      - bash
      - -c
      - |
        openssl rand -base64 756 > /replica.key
        chmod 400 /replica.key
        chown 999:999 /replica.key
        exec docker-entrypoint.sh $$@
    command: [ "mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017", "-keyFile", "/replica.key" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    container_name: "api_db"
    restart: on-failure
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${API_DB_ADMIN_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${API_DB_ADMIN_PW:-pw}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-RefData}
    networks:
      - api
      - apiDb

  # Used to start the replica set in the MongoDb instance (will run once and exit)
  db_init:
    image: mongo:8-noble
    container_name: "db_init"
    restart: "no"
    depends_on:
      api_db:
        condition: service_healthy
    command: >
      mongosh --username ${API_DB_ADMIN_USER:-admin} --password ${API_DB_ADMIN_PW:-pw} --host api_db:27017 --eval ' rs.initiate( {
         _id : "rs0",
         members: [
            { _id: 0, host: "api_db:27017" }
         ]
      }) '
    networks:
      - apiDb

  api_db_gui:
    image: mongo-express:latest
    container_name: "api_db_gui"
    environment:
      - ME_CONFIG_MONGODB_SERVER=api_db
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
      - ME_CONFIG_MONGODB_AUTH_USERNAME=${API_DB_ADMIN_USER:-admin}
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=${API_DB_ADMIN_PW:-pw}
      - ME_CONFIG_BASICAUTH_USERNAME=appUser
      - ME_CONFIG_BASICAUTH_PASSWORD=appPw
      - ME_CONFIG_MONGODB_URL=mongodb://${API_DB_ADMIN_USER:-admin}:${API_DB_ADMIN_PW:-pw}@api_db:27017/?replicaSet=rs0
    depends_on:
      api_db:
        condition: service_healthy
    ports:
      - ${MONGO_GUI_PORT:-9000}:8081
    networks:
      - apiDb
  
  webhook_server:
    build:
      context: ../../
      dockerfile: ./setup/local/webhook/Dockerfile
    container_name: "webhook_server"
    restart: on-failure
    environment:
      - DOTNET_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=10000
    ports:
      - ${WEBHOOK_API_PORT:-10001}:10000
    networks:
      - notification

  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    networks:
      - kafka

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - ${KAFKA_GUI_PORT:-9002}:8080
    depends_on:
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - kafka

networks:
  api:
  apiDb:
  dblistener:
  dblistenerDb:
  notification:
  notificationDb:
  kafka:
