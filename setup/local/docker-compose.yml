services:
  dblistener:
    build:
      context: ../../
      dockerfile: ./src/DbListener/Dockerfile
    container_name: "dblistener"
    restart: on-failure
    depends_on:
      dblistener_db:
        condition: service_healthy
      api_db:
        condition: service_healthy
    environment:
      - DOTNET_ENVIRONMENT=Development
      - MONGO_CON_STR=mongodb://admin:pw@api_db:27017/admin?authMechanism=SCRAM-SHA-256&replicaSet=rs0
    networks:
      - dblistener
      - dblistenerBd
      - apiDb

  dblistener_db:
    image: redis:7-alpine
    container_name: "dblistener_db"
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    networks:
      - dblistener
      - dblistenerBd

  dblistener_db_gui:
    image: redislabs/redisinsight:latest
    container_name: "dblistener_db_gui"
    restart: on-failure
    depends_on:
      dblistener_db:
        condition: service_healthy
    ports:
      - "9001:5540"
    networks:
      - dblistenerBd

  api:
    build:
      context: ../../
      dockerfile: ./src/Api/Dockerfile
    container_name: "api"
    restart: on-failure
    depends_on:
      api_db:
        condition: service_healthy
    environment:
      - DOTNET_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=10000
      - MONGO_CON_STR=mongodb://admin:pw@api_db:27017/admin?authMechanism=SCRAM-SHA-256&replicaSet=rs0
    ports:
      - 10000:10000
    networks:
      - api

  api_db:
    image: mongo:8-noble
    entrypoint:
      - bash
      - -c
      - |
        openssl rand -base64 756 > /replica.key
        chmod 400 /replica.key
        chown 999:999 /replica.key
        exec docker-entrypoint.sh $$@
    command: [ "mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017", "-keyFile", "/replica.key" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    container_name: "api_db"
    restart: on-failure
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=pw
      - MONGO_INITDB_DATABASE=RefData
    networks:
      - api
      - apiDb

  # Used to start the replica set in the MongoDb instance (will run once and exit)
  db_init:
    image: mongo:8-noble
    container_name: "db_init"
    restart: "no"
    depends_on:
      api_db:
        condition: service_healthy
    command: >
      mongosh --username admin --password pw --host api_db:27017 --eval ' rs.initiate( {
         _id : "rs0",
         members: [
            { _id: 0, host: "api_db:27017" }
         ]
      }) '
    networks:
      - apiDb

  api_db_gui:
    image: mongo-express:latest
    container_name: "api_db_gui"
    environment:
      - ME_CONFIG_MONGODB_SERVER=api_db
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
      - ME_CONFIG_MONGODB_AUTH_USERNAME=admin
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=pw
      - ME_CONFIG_BASICAUTH_USERNAME=appUser
      - ME_CONFIG_BASICAUTH_PASSWORD=appPw
      - ME_CONFIG_MONGODB_URL=mongodb://admin:pw@api_db:27017/?replicaSet=rs0
    depends_on:
      api_db:
        condition: service_healthy
    ports:
      - "9000:8081"
    networks:
      - apiDb

networks:
  api:
  apiDb:
  dblistener:
  dblistenerBd:
